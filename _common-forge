# vim: set ft=make:
#
# Copyright (c) 2016-2017, Ryan V. Bissell
# All rights reserved.
#
# SPDX-License-Identifier: MIT
# See the enclosed "LICENSE.forge" file for exact license terms.
#

ifndef __cf_include_guard
override __cf_include_guard:=1


_cfthis:=$(lastword $(MAKEFILE_LIST))
_cfcaller:=$(notdir $(lastword $(wordlist 2,$(words $(MAKEFILE_LIST)),foo $(MAKEFILE_LIST))))
cf_assert = $(if $($1),,\
              $(error INTERNAL ERROR:  $(_cfcaller) should have defined '$1' before including $(notdir $(_cfthis))))

$(call cf_assert,CF)
$(call cf_assert,cf_outdir)

_cfdir:=$(dir $(_cfthis))
_cfdir:=$(_cfdir:%/=%)
include $(_cfdir)/_hackery/opsys
include $(_cfdir)/_hackery/hackery
include $(_cfdir)/_hackery/tracing

$(cf_outdir):
	@$(test) mkdir -p $(cf_outdir)


# TODO, see make-forge
########.PHONY: clean


# .d files are precious because they serve to speed up subsequent builds.
# .i files are precious because the user specifically asked for them.
.PRECIOUS: $(cf_outdir)/%.d $(cf_outdir)/%.i


# enable paralellism based on number of available processors
# I believe this is the most portable solution (nearly POSIX)
override CF_NUMPROCS?=$(shell getconf _NPROCESSORS_ONLN)
override MAKEFLAGS+= --jobs=$(CF_NUMPROCS)
$(call verbose,This session will use $(CF_NUMPROCS) processor(s))

ifndef CF_NOSYNC
# group parallel output on a per-target basis,
# XXX: this will make stderr undetectable by stderred
override MAKEFLAGS+= --output-sync=target
endif

# squelch unhelpful output from Make
override MAKEFLAGS+= --no-print-directory

override BUILDOS:=$(mh_buildos)
override HOSTOS:=$(BUILDOS)


ifeq ($(BUILDOS),linux)
    override cfobj:=o
    override cflib:=a
    override cfexe:=
    override cfdll:=so
else ifeq ($(BUILDOS),windows)
    override cfobj:=obj
    override cflib:=lib
    override cfexe:=exe
    override cfdll:=dll
endif


# TODO: some of these may be specific to the host OS
ifdef TEST
    override test:=echo
    override test2:=>/dev/null $(test)
    override pipe:=\|
    override redir:=\>
    override indir:=\<
    override append:=\>\>
    ifeq ($(TEST),2)
        override test2:=$(test)
    endif
else
    override test:=
    override test2:=
    override pipe:=|
    override redir:=>
    override indir:=<
    override append:=>>
endif

ifdef DEBUG
    override CFLAGS+= -O0 -ggdb3
endif

override echo:=echo
ifdef CF_QUIET_BUILDS
    override echo:=>/dev/null echo
endif


# save off the original values of CXXFLAGS, etc, so that we
# can restore them a the start of every target declaration
override CF_CFLAGS:=$(CFLAGS)
override CF_LDFLAGS:=$(LDFLAGS)
override CF_CPPFLAGS:=$(CPPFLAGS)
override CF_CXXFLAGS:=$(CXXFLAGS)

# traditionally, ARFLAGS defaults to 'rv', but we like 'rcs' here
override CF_ARFLAGS:=rcs


define append_var =
$(trace_in)
	@echo "$1 := $$($1)" $(append)$2
$(trace_out)
endef

append_vars = $(foreach item, @ % < ? ^ + | *,$(call append_var,$(item),$1))



# ---------------------------------------------------------------------
# INTERNAL:     (__cf_initialize)
# Description:  Resets internal state, in preparation for
#               cf_declare_target, et al.
# ---------------------------------------------------------------------
define __cf_initialize =
$(trace_in)
    $(eval override LDLIBS:=)
    $(eval override CFLAGS:=$(CF_CFLAGS))
    $(eval override ARFLAGS:=$(CF_ARFLAGS))
    $(eval override LDFLAGS:=$(CF_LDFLAGS))
    $(eval override CPPFLAGS:=$(CF_CPPFLAGS))
    $(eval override CXXFLAGS:=$(CF_CXXFLAGS))
    $(eval override cf_suffix:=)
    $(eval override cf_printsuffix:=)
    $(eval override cf_srcfiles:=)
    $(eval override cf_objfiles:=)
    $(eval override cf_depfiles:=)
    $(eval override cf_libfiles:=)
    $(eval override cf_linkfiles:=)
    $(eval override cf_deptargets:=)
$(trace_out)
endef


# ---------------------------------------------------------------------
# Function:     ($(CF)-declare-target,name)
# Description:  Declares to make-forge that a new build-target named
#               'name' is about to be described.
# Arguments: 1: name of the build-target being described
#            2: [optional] cf_target_outdir override
# ---------------------------------------------------------------------
define _cf_declare_target =
$(trace_in)
    $(call __cf_initialize)
    $(eval override cf_target:=$(cf_prefix)$1$(CF_NAMESPACE))
    $(call verbose,- target $(cf_target))
    $(if $(CF_CALLBACK),$(eval $(call $(CF_CALLBACK),$1,$(CF_NAMESPACE))))
    $(eval override cf_target_outdir:=$(if $2,$2,$(cf_outdir)))
    $(call tracep,cf_target_outdir will be '$(cf_target_outdir)')
    $(call tracep,cf_target will be '$(cf_target)')
$(trace_out)
endef
$(CF)-declare-target = $(trace_in)$(strip $(call _cf_declare_target,$1,$2))$(trace_out)


# ---------------------------------------------------------------------
# Function:     ($(CF)-set-object-suffix,suffix)
# Description:  Sets a filename stem suffix for every object file
#               built for this build-target
# Arguments: 1: What the suffix should be set to
# ---------------------------------------------------------------------
define _cf_set_object_suffix =
$(trace_in)
    $(eval override cf_suffix:=_$(1))
    $(eval override cf_printsuffix:=($(1)))
$(trace_out)
endef
$(CF)-set-object-suffix = $(strip $(call _cf_set_object_suffix,$1))


# ---------------------------------------------------------------------
# INTERNAL:     (__cf_announce_compile)
# Description:  echo standardized string to announce source compilation
# Arguments: 1: Parenthesized suffix, if set
# ---------------------------------------------------------------------
define __cf_announce_compile =
$(trace_in)
	@$(echo) "+++ [$$(notdir $(cf_target))] $$(notdir $$<)$(tab)$(1)"
$(trace_out)
endef


define __cf_compile =
$(trace_in)
	$(eval C:=$(strip $3))
	$(call tracep,1 will be '$1')
	$(call tracep,2 will be '$2')
	$(call tracep,3 will be '$3')
	$(call tracep,C will be '$C')
	@echo "$$(subst $$$$,\$$$$,$$$$(if $$$$(call neq,$3,$C),$$$$(call verbose,Configuration changed for $$(notdir $$<) $(cf_printsuffix))$$$$(shell $(RM) $$@)))" >> $2
	@$(call __cf_announce_compile,$1)
	@$(test) $C
$(trace_out)
endef


# ---------------------------------------------------------------------
# INTERNAL:     (__cf_compile_C)
# Description:  compile a C++ source file
# Arguments: 1: Parenthesized suffix, if set
#            2: Path of depfile
# ---------------------------------------------------------------------
define __cf_compile_C =
$(trace_in)
	$(call __cf_compile,$1,$2,$$$$(CC) $$$$(CPPFLAGS_$(cf_target)) $$$$(CFLAGS_$(cf_target)) -c $$$$< -o $$$$@)
$(trace_out)
endef


# ---------------------------------------------------------------------
# INTERNAL:     (__cf_compile_C++)
# Description:  compile a C++ source file
# Arguments: 1: Parenthesized suffix, if set
#            2: Path of depfile
# ---------------------------------------------------------------------
define __cf_compile_C++ =
$(trace_in)
	$(call __cf_compile,$1,$2,$$$$(CXX) $$$$(CPPFLAGS_$(cf_target)) $$$$(CFLAGS_$(cf_target)) $$$$(CXXFLAGS_$(cf_target)) -c $$$$< -o $$$$@)
$(trace_out)
endef


# ---------------------------------------------------------------------
# INTERNAL:     (__cf_gen_dependencies)
# Description:  generate source/header dependency info
#
# This is based on Scott McPeak's "Autodependencies with GNU make"
# described at http://scottmcpeak.com/autodepend/autodepend.html
#
#    $(CXX):   use compiler to generate .d file
#    mv:       rename .d file to .d.tmp
# transform .d.tmp into a usable .d with:
#    sed:      use FQPN for target
# additionally, the following ensures that the build still succeeds
# if source files get renamed while .d files exist:
#    echo:     add blank line
#    sed:    - strip the target (up-to and including colon)
#            - remove any continuation backslash
#    fmt -1:   list 'words' (files) one per line
#    sed:    - strip leading spaces
#            - add trailing colons (and blank lines)
#            - remove lines containing only a colon
#
# Arguments: 1: typically, this is '$*$(cf_suffix).o'
# ---------------------------------------------------------------------
# TODO it seems possibly wrong that we hardcode $(CXX) below, since
# this could be used for C code as well.
define __cf_gen_dependencies =
$(trace_in)
	@$(test2) $(CXX) -MM $(CPPFLAGS) $(CXXFLAGS) $$< $(redir)$(cf_target_outdir)/$(1).d
	@$(test2) mv -f $(cf_target_outdir)/$(1).d $(cf_target_outdir)/$(1).d.tmp
	@$(test2) sed -e 's|.*:|$(cf_target_outdir)/$(1):|' $(indir)$(cf_target_outdir)/$(1).d.tmp $(redir)$(cf_target_outdir)/$(1).d
	@$(test2) echo "" $(append)$(cf_target_outdir)/$(1).d
	@$(test2) sed -e 's/.*://' \
	              -e 's/\\$$$$//' $(indir)$(cf_target_outdir)/$(1).d.tmp $(pipe) \
	 $(test2) fmt -1 $(pipe) \
	 $(test2) sed -e 's/^ *//' \
	              -e 's/$$$$/:\n/' \
	              -e 's/^:.*$$$$/\n/' $(append)$(cf_target_outdir)/$(1).d
	@$(test2) $(RM) $(cf_target_outdir)/$(1).d.tmp
	@echo "" >>$(cf_target_outdir)/$(1).d
	@echo "$(cf_target_outdir)/$(1): $(sort $(MAKEFILE_LIST:%.d=))" >>$(cf_target_outdir)/$(1).d
	@echo "" >>$(cf_target_outdir)/$(1).d
	$(call append_vars,$(cf_target_outdir)/$(1).d)
	@echo "" >>$(cf_target_outdir)/$(1).d
$(trace_out)
endef


# ---------------------------------------------------------------------
# INTERNAL:     (___cf_gen_static_pattern_rule,LANG,obj,dir,glob)
# Description:  Really generates the static-pattern-rule
# Arguments: 1: The NAME of the language being compiled (C, C++)
#            2: FQPN of the object file that is the target of this
#               rule (This may have been name-mangled with cf_suffix)
#            3: the directory where the source(s) are located
#            4: the file name (or file glob) to be compiled.
# ---------------------------------------------------------------------
define ___cf_gen_static_pattern_rule
$(trace_in)
    $(2): $(cf_target_outdir)/%$(cf_suffix).$(cfobj): $(3)/%$(4) | $(cf_target_outdir)
	@$(call __cf_gen_dependencies,$$*$(cf_suffix).$(cfobj))
	$(call __cf_compile_$(1),$(cf_printsuffix),$(cf_target_outdir)/$$*$(cf_suffix).$(cfobj).d)
$(trace_out)
endef


# ---------------------------------------------------------------------
# INTERNAL:     (__cf_gen_static_pattern_rule,LANG,obj,dir,glob)
# Description:  Generates a gnu-make "static-pattern-rule" based on
#               the passed-in arguments.
# Arguments: 1: The NAME of the language being compiled (C, C++)
#            2: FQPN of the object file that is the target of this
#               rule (This may have been name-mangled with cf_suffix)
#            3: the directory where the source(s) are located
#            4: the file name (or file glob) to be compiled.
# ---------------------------------------------------------------------
define __cf_gen_static_pattern_rule
$(trace_in)
    $(if $(filter $2,$(cf_static_pattern_rules)),
         ,
         $(call ___cf_gen_static_pattern_rule,$1,$2,$3,$4)
         $(eval override cf_static_pattern_rules+=$2))
$(trace_out)
endef


# ---------------------------------------------------------------------
# Function:     ($(CF)-add-sources,LANG,dir,glob)
# Description:  Declares which sources need to be build for the current
#               target.  (This may be invoked multiple times as needed,
#               in each target.)
# Arguments: 1: NAME of the language being compiled (C,C++)
#            2: the directory where the source(s) are located
#            3: the file name (or file glob) to be compiled
# ---------------------------------------------------------------------
define _cf_add_sources =
$(trace_in)
    $(call tracep,cf_target_outdir is '$(cf_target_outdir)')
    $(eval override _mfas_src:=$(wildcard $(2)/$(3)))
    $(eval override _mfas_ext:=$(suffix $(3)))
    $(eval override _mfas_obj:=$(subst $(_mfas_ext),$(cf_suffix).$(cfobj),$(_mfas_src)))
    $(eval override _mfas_obj:=$(subst $(2),$(cf_target_outdir),$(_mfas_obj)))
    $(eval override cf_srcfiles+=$(_mfas_src))
    $(eval override cf_objfiles+=$(_mfas_obj))
    $(eval override CFLAGS_$(cf_target):=$(CFLAGS))
    $(eval override CPPFLAGS_$(cf_target):=$(CPPFLAGS))
    $(eval override CXXFLAGS_$(cf_target):=$(CXXFLAGS))
    $(eval $(call __cf_gen_static_pattern_rule,$(1),$(_mfas_obj),$(2),$(_mfas_ext)))
    $(eval undefine _mfas_src)
    $(eval undefine _mfas_ext)
    $(eval undefine _mfas_obj)
$(trace_out)
endef
$(CF)-add-sources = $(strip $(call _cf_add_sources,$1,$2,$3))


# ---------------------------------------------------------------------
# INTERNAL:     (__cf_static_lib_dependency,target)
# Description:  support routine for cf_static_dependencies
# Arguments: 1: name of the build-target that builds the static
#               library that the current-target is dependendent upon.
#               From this, the library's filename is inferred to be
#               stored in cf_<target>_file
# ---------------------------------------------------------------------
define __cf_static_lib_dependency =
$(trace_in)
    $(eval override _mfsld_target:=$(1))
    $(call tracep,_mfsld_target is '$(_mfsld_target)')
    $(eval override _mfsld_libfile:=$(cf_$(_mfsld_target)_file))
    $(call tracep,_mfsld_libfile is '$(_mfsld_libfile)')
    $(eval override cf_deptargets+=$(_mfsld_target))
    $(eval override cf_linkfiles+=$(_mfsld_libfile))
    $(eval undefine _mfsld_libfile)
    $(eval undefine _mfsld_target)
$(trace_out)
endef


# ---------------------------------------------------------------------
# Function:     ($(CF)-static-dependencies,targets)
# Description:  Declares the current-target's static-lib linkage dependencies
# Arguments: 1: space-delimited list of build-targets
# ---------------------------------------------------------------------
define _cf_static_dependencies =
$(trace_in)
    $(eval override _mfsd_targets:=$(1))
    $(foreach target,$(_mfsd_targets),$(call __cf_static_lib_dependency,$(target)))
    $(eval undefine _mfsd_targets)
$(trace_out)
endef
$(CF)-static-dependencies = $(strip $(call _cf_static_dependencies,$1))


# ---------------------------------------------------------------------
# INTERNAL:     (__cf_import_depfiles)
# Description:  Support routine for cf_build_xxxxx routines
#               Includes (when present) all .d files that match the
#               target's objfiles
# ---------------------------------------------------------------------
define __cf_import_depfiles =
$(trace_in)
    $(eval override cf_depfiles:=$(cf_objfiles:.$(cfobj)=.d))
    -include $(cf_depfiles)
$(trace_out)
endef


# ---------------------------------------------------------------------
# INTERNAL:     (__cf_delete_mfout_files,files)
# Description:  Helper routine to ___cf_gen_cleantarget
# Arguments: 1: Space-delimited list of files to delete
# ---------------------------------------------------------------------
define __cf_delete_mfout_files =
$(trace_in)
	 ([ -e $(cf_target_outdir) ] && $(test) $(RM) $(1)) || true;
$(trace_out)
endef


# ---------------------------------------------------------------------
# INTERNAL:     (___cf_gen_cleantarget,target,filelist)
# Description:  Really generates the clean-target
# Arguments: 1: Name of the current-target (TODO: could just assume cf_target)
#            2: Space-delimited list of variable names, each containing
#               a space-delimited list of files to be deleted.
# ---------------------------------------------------------------------
define ___cf_gen_cleantarget =
$(trace_in)
    # TODO: just use cf_target instead of passing it in as arg?
    $(eval override _mfgc_target:=$(1))
    $(eval override _mfgc_varnames:=$(2))

    .PHONY: _clean_$(_mfgc_target)
    _clean_$(_mfgc_target):
	@([ -e $(cf_target_outdir) ] && $(echo) "+++ [$(_mfgc_target)] Cleaning...") || true
	@$(foreach _var,$(_mfgc_varnames),$(call __cf_delete_mfout_files,$($(_var))))

    $(eval override cf_clean_targets+=_clean_$(_mfgc_target))
$(trace_out)
endef



# ---------------------------------------------------------------------
# INTERNAL:     (__cf_gen_cleantarget,target,filelist)
# Description:  Generates a clean-target for the current-target, and
#               adds it to the global list of clean-targets (to be
#               used by target 'clean')
# Arguments: 1: Name of the current-target (TODO: could just assume cf_target)
#            2: Space-delimited list of variable names, each containing
#               a space-delimited list of files to be deleted.
# ---------------------------------------------------------------------
define __cf_gen_cleantarget =
$(trace_in)
    # there is a risk of overriding clean targets, when the same
    # .MF file gets include_as'd multiple times.  Solve this problem
    # by tracking which ones have already been defined.  (Thankfully,
    # we already have $(cf_clean_targets) for other needs.)
    $(if $(filter _clean_$(1),$(cf_clean_targets)),
         ,
         $(call ___cf_gen_cleantarget,$1,$2))
$(trace_out)
endef


# ---------------------------------------------------------------------
#  INTERNAL:     (__cf_build_target_file,filename,string)
#  Description:  Generates the ultimate target file of the current-target
#  Arguments: 1: The fully-qualified filename of the file to be generated.
#             2: A string describing the type of file being built
# ---------------------------------------------------------------------
define __cf_build_target_file =
$(trace_in)
    $(eval override cf_$(cf_target)_file:=$1)
    $(eval $(__cf_import_depfiles))
    $(eval override cf_objfiles:=$(sort $(cf_objfiles)))
    $(eval override cf_linkfiles:=$(sort $(cf_linkfiles)))

    $(cf_target): $(cf_deptargets) $(cf_$(cf_target)_file)

    $(eval $(call __cf_gen_cleantarget,$(cf_target),cf_objfiles cf_depfiles cf_$(cf_target)_file))
    $(cf_$(cf_target)_file): $(cf_objfiles) $(cf_linkfiles)
	@$(echo) +++ [$(cf_target)] Generating $(2) \'$$(notdir $$@)\'...
$(trace_out)
endef


# ---------------------------------------------------------------------
#  Function:     (__cf_build_static_library,filename)
#  Description:  This ends the target definition for a static library
#  Arguments: 1: The static library's fully-qualified filename
# ---------------------------------------------------------------------
define __cf_build_static_library =
$(trace_in)
    $(call __cf_build_target_file,$1,static-library)
	@$(test) $(AR) $(ARFLAGS) $$@ $$^
$(trace_out)
endef


# ---------------------------------------------------------------------
#  Function:     ($(CF)-build-static-library,stem)
#  Description:  This ends the target definition for a static library
#  Arguments: 1: The stem of the static library's intended filename
# ---------------------------------------------------------------------
define _cf_build_static_library =
$(trace_in)
    $(eval override _cfbsl_name:=$(if $1,$1,$(cf_target)).$(cflib))
    $(eval override _cfbsl_name:=$(cf_target_outdir)/$(_cfbsl_name))
    $(if $(filter $(_cfbsl_name),$(cf_static_libraries)),
         ,
         $(call __cf_build_static_library,$(_cfbsl_name)))
    $(eval cf_static_libraries+=$(_cfbsl_name))
$(trace_out)
endef
$(CF)-build-static-library = $(eval $(call _cf_build_static_library,$1))


# ---------------------------------------------------------------------
#  Function:     (__cf_build_shared_library,filename)
#  Description:  This ends the target definition for a shared library.
#                This will add '-shared' to LDFLAGS
#  Arguments: 1: The shared library's fully-qualified filename
# ---------------------------------------------------------------------
define __cf_build_shared_library =
$(trace_in)
    # TODO, need an add-flags routine
    $(eval override LDFLAGS+=-shared)
    $(call __cf_build_target_file,$1,shared-library)
	@$(test) $(CXX) $(LDFLAGS) $$^ -o $$@
$(trace_out)
endef


# ---------------------------------------------------------------------
#  Function:     ($(CF)-build-shared-library,stem)
#  Description:  This ends the target definition for a shared library.
#                This will add '-shared' to LDFLAGS
#  Arguments: 1: The stem of the shared library's intended filename
# ---------------------------------------------------------------------
define _cf_build_shared_library =
$(trace_in)
    $(eval override _cfbshl_name:=$(if $1,$1,$(cf_target)).$(cfdll))
    $(eval override _cfbshl_name:=$(cf_target_outdir)/$(_cfbshl_name))
    $(if $(filter $(_cfbshl_name),$(cf_shared_libraries)),
         ,
         $(call __cf_build_shared_library,$(_cfbshl_name)))
    $(eval cf_shared_libraries+=$(_cfbshl_name))
$(trace_out)
endef
$(CF)-build-shared-library = $(eval $(call _cf_build_shared_library,$1))


# ---------------------------------------------------------------------
#  Function:     (__cf_build_executable,filename)
#  Description:  This end the target definition for an executable
#  Arguments: 1: The executable's fully-qualified filename
# ---------------------------------------------------------------------
define __cf_build_executable =
$(trace_in)
    $(call __cf_build_target_file,$1,executable)
	@$(test) $(CXX) $(LDFLAGS) $$^ $(LDLIBS) -o $$@
$(trace_out)
endef


# ---------------------------------------------------------------------
#  Function:     ($(CF)-build-executable,stem)
#  Description:  This end the target definition for an executable
#  Arguments: 1: The stem of the executable's intended filename
# ---------------------------------------------------------------------
define _cf_build_executable =
$(trace_in)
    $(eval override _cfbe_name:=$(if $1,$1,$(cf_target))$(cfexe))
    $(eval override _cfbe_name:=$(cf_target_outdir)/$(_cfbe_name))
    $(if $(filter $(cf_target_outdir)/$(_cfbe_name),$(cf_executables)),
         ,
         $(call __cf_build_executable,$(_cfbe_name)))
    $(eval cf_executables+=$(cf_target_outdir)/$(_cfbe_name))
$(trace_out)
endef
$(CF)-build-executable = $(eval $(call _cf_build_executable,$1))


# ---------------------------------------------------------------------
#  Function:     ($(CF)-include-as,namespace,filepath[,callback])
#  Description:  This imports the make-forge fragment located at
#                'filepath', under the namespace 'namespace'
#  Arguments: 1: The desired namespace.  This does not have to be
#                unique, but it is generally recommended to be
#             2: Path to the make-forge fragment (.MF)
#             3: [optional] name of target notification callback
# ---------------------------------------------------------------------
#  TODO: enforce .MF extension?
override undefine cf_prefix
define $(CF)-include-as =
$(trace_in)
    $(eval override CF_NAMESPACE:=$(if $1,@$1,))
    $(eval override CF_CALLBACK:=$3)
    $(call verbose,including '$(2)' as '$1')
    $(eval include $(2))
    $(eval override undefine CF_CALLBACK)
    $(eval override undefine CF_NAMESPACE)
$(trace_out)
endef


# each release adds another digit of i^i (0.207879576350761908546955619834978770033877841631769608075...)
cf_version_major:=0
cf_version_minor:=20787957
cf_version_text:=... (beta release "i^i")
_version:
	@echo "( build/test system: MAKE-FORGE, version $(cf_version_major).$(cf_version_minor)$(cf_version_text) )"


$(eval $(call __cf_initialize))

endif  # __cf_include_guard
