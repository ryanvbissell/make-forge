#
# Copyright (c) 2016-2017, Ryan V. Bissell
# All rights reserved.
#
# SPDX-License-Identifier: MIT
# See the enclosed "LICENSE" file for exact license terms.
#

ifndef MF_COMMON_INCLUDE_GUARD
override MF_COMMON_INCLUDE_GUARD:=1

mf_myname:=$(notdir $(lastword $(MAKEFILE_LIST)))
ifndef MFOUT
$(error You must define 'MFOUT' before including $(mf_myname))
endif
$(MFOUT):
	@$(test) mkdir -p $(MFOUT)


# TODO, see make-forge.mk
########.PHONY: clean


# .d files are precious because they serve to speed up subsequent builds.
# .i files are precious because the user specifically asked for them.
.PRECIOUS: $(MFOUT)/%.d $(MFOUT)/%.i


# enable paralellism based on number of available processors
# I believe this is the most portable solution (nearly POSIX)
mf_numprocs=$(shell getconf _NPROCESSORS_ONLN)
override MAKEFLAGS+= --jobs=${mf_numprocs}
ifdef VERBOSE
$(info V: This build will use $(mf_numprocs) processor(s))
endif

# group parallel output on a per-target basis,
# and squelch unhelpful output from Make
# TODO: the --output-sync line will make stderr undetectable by stderred
#override MAKEFLAGS+= --output-sync=target
override MAKEFLAGS+= --no-print-directory



# TODO: these should be specific to the host OS
override MFOBJ:=o
override MFLIB:=a
override MFEXE:=


# TODO: some of these may be specific to the host OS
ifdef TEST
    override test:=echo
    override test2:=>/dev/null $(test)
    override pipe:=\|
    override redir:=\>
    override indir:=\<
    override append:=\>\>
    ifeq ($(TEST),2)
        override test2:=$(test)
    endif
else
    override test:=
    override test2:=
    override pipe:=|
    override redir:=>
    override indir:=<
    override append:=>>
endif

ifdef DEBUG
    override CXXFLAGS+= -ggdb3 -O0
endif

override ECHO:=echo
ifdef MF_QUIET_BUILDS
    override ECHO:=>/dev/null echo
endif


# INTERNAL: initializes internal state
define __mf_initialize =
    $(eval override MF_LDFLAGS:=$(LDFLAGS))
    $(eval override MF_CPPFLAGS:=$(CPPFLAGS))
    $(eval override MF_CXXFLAGS:=$(CXXFLAGS))
    $(eval override undefine mf_srcfiles)
    $(eval override undefine mf_objfiles)
    $(eval override undefine mf_depfiles)
    $(eval override undefine mf_libfiles)
    $(eval override undefine mf_linkfiles)
    $(eval override undefine mf_deptargets)
endef


# re-initializes, accepts target-name, prepares for target attributes
define mf_declare_target =
    $(eval $(call __mf_initialize))
    $(eval override mf_target:=$(1))
    $(eval override mf_outdir:=$(MFOUT))
endef


# INTERNAL: compile a C++ source file
define __mf_compile_c++ =
	@$(ECHO) "+++ [$$(notdir $(mf_target))] $$(notdir $$<)"
	@$(test) $(CXX) $(MF_CPPFLAGS) $(MF_CXXFLAGS) -c $$< -o $$@
endef


# INTERNAL: generate source/header dependency info
#    $(CXX):   use compiler to generate .d file
#    mv:       rename .d file to .d.tmp
# transform .d.tmp into a usable .d with:
#    sed:      use FQPN for target
# additionally, the following ensures that the build still succeeds
# if source files get renamed while .d files exist:
#    echo:     add blank line
#    sed:    - strip the target (up-to and including colon)
#            - remove any continuation backslash
#    fmt -1:   list 'words' (files) one per line
#    sed:    - strip leading spaces
#            - add trailing colons (and blank lines)
#            - remove lines containing only a colon
define __mf_gen_dependencies =
	@$(test2) $(CXX) -MM $(MF_CPPFLAGS) $(MF_CXXFLAGS) $$< $(redir)$(mf_outdir)/$(1).d
	@$(test2) mv -f $(mf_outdir)/$(1).d $(mf_outdir)/$(1).d.tmp
	@$(test2) sed -e 's|.*:|$(mf_outdir)/$(1).o:|' $(indir)$(mf_outdir)/$(1).d.tmp $(redir)$(mf_outdir)/$(1).d
	@$(test2) echo "" $(append)$(mf_outdir)/$(1).d
	@$(test2) sed -e 's/.*://' \
	              -e 's/\\$$$$//' $(indir)$(mf_outdir)/$(1).d.tmp $(pipe) \
	 $(test2) fmt -1 $(pipe) \
	 $(test2) sed -e 's/^ *//' \
	              -e 's/$$$$/:\n/' \
	              -e 's/^:.*$$$$/\n/' $(append)$(mf_outdir)/$(1).d
	@$(test2) $(RM) $(mf_outdir)/$(1).d.tmp
endef


# INTERNAL: a general static-pattern rule for c++
define __mf_gen_static_pattern_rule_c++
    $(1): $(mf_outdir)/%.$(MFOBJ): $(2)/%$(3) | $(mf_outdir)
	@$(call __mf_compile_c++)
	@$(call __mf_gen_dependencies,$$*)
endef


# declare which sources need to be built for the current target
# (this may be invoked multiple times per target, as needed)
define mf_add_sources =
    $(eval override _lang=$(1))
    $(eval override _dir=$(2))
    $(eval override _src:=$(wildcard $(_dir)/$(3)))
    $(eval override _ext:=$(suffix $(3)))
    $(eval override _obj:=$(subst $(_ext),.$(MFOBJ),$(_src)))
    $(eval override _obj:=$(subst $(_dir),$(mf_outdir),$(_obj)))
    $(eval override mf_srcfiles+= $(_src))
    $(eval override mf_objfiles+= $(_obj))
    $(eval $(call __mf_gen_static_pattern_rule_$(_lang),$(_obj),$(_dir),$(_ext)))
    $(eval undefine _lang)
    $(eval undefine _src)
    $(eval undefine _ext)
    $(eval undefine _obj)
endef


# INTERNAL: support routine for mf_static_dependencies
define __mf_lib_dependency =
    $(eval override _target=$(1))
    $(eval override _libfile:=$(mf_$(_target)_libfile))
    $(eval override mf_deptargets+= $(_target))
    $(eval override mf_linkfiles+= $(_libfile))
    $(eval undefine _libfile)
    $(eval undefine _target)
endef


# declare this target's static-lib linkage dependencies
# ($(1) should be a space-delimited list of targets)
define mf_static_dependencies =
    $(eval override _targets=$(1))
    $(foreach target,$(_targets),$(eval $(call __mf_lib_dependency,$(target))))
    $(eval undefine _targets)
endef


# INTERNAL: support routine for mf_build_xxxxx routines
# includes (when present) all .d files that match the target's objfiles
define __mf_import_depfiles =
    $(eval override mf_depfiles:=$(mf_objfiles:.$(MFOBJ)=.d))
    -include $(mf_depfiles)
endef


# this ends the target definition for a static library
define mf_build_static_library =
    $(eval override _stem:=$(1))

    $(eval $(__mf_import_depfiles))
    $(eval override mf_$(mf_target)_libfile:=$(mf_outdir)/$(_stem).$(MFLIB))

    # the name of the variable that holds this target name must be unique,
    # because it is referred to by __mf_lib_dependency
    $(mf_$(mf_target)_libfile): $(mf_objfiles)
	@$(ECHO) +++ [$(mf_target)] Generating static library \'$$(notdir $$@)\'...
	@$(test) $(AR) rcs $$@ $$^

    $(mf_target): $(mf_$(mf_target)_libfile)

    .PHONY: _clean_$(mf_target)
    _clean_$(mf_target):
	@([ -e $(MFOUT) ] && $(ECHO) "+++ [$(mf_target)] Cleaning...") || true
	@$(test) ([ -e $(MFOUT) ] && $(RM) $(mf_objfiles)) || true
	@$(test) ([ -e $(MFOUT) ] && $(RM) $(mf_depfiles)) || true
	@$(test) ([ -e $(MFOUT) ] && $(RM) $(mf_$(mf_target)_libfile)) || true

    $(eval override mf_clean_targets+=_clean_$(mf_target))
    $(eval undefine _stem)
endef


# this ends the target definition for an executable
define mf_build_executable =
    $(eval override _stem:=$(1))
    $(eval $(__mf_import_depfiles))
    $(eval override _exefile:=$(mf_outdir)/$(_stem)$(MFEXE))

    $(_exefile): $(mf_objfiles) $(mf_linkfiles)
	@$(ECHO) +++ [$(mf_target)] Generating executable \'$$(notdir $$@)\'...
	@$(test) $(CXX) -o $$@ $$^ $(LDFLAGS) $(MF_LDFLAGS)

    $(mf_target): $(mf_deptargets) $(_exefile)

    .PHONY: _clean_$(mf_target)
    _clean_$(mf_target):
	@([ -e $(MFOUT) ] && $(ECHO) "+++ [$(mf_target)] Cleaning...") || true
	@$(test) ([ -e $(MFOUT) ] && $(RM) $(mf_objfiles)) || true
	@$(test) ([ -e $(MFOUT) ] && $(RM) $(mf_depfiles)) || true
	@$(test) ([ -e $(MFOUT) ] && $(RM) $(_exefile)) || true

    $(eval override mf_clean_targets+=_clean_$(mf_target))
    $(eval undefine _stem)
endef


# each release adds another digit of i^i
mf_version:=0.2 (beta)
version::
	@echo "( build/test system: MAKE-FORGE, version $(mf_version) )"
	@echo ""


$(eval $(call __mf_initialize))

endif  # MF_COMMON_INCLUDE_GUARD
