# vim: set ft=make:
#
# Copyright (c) 2016-2017, Ryan V. Bissell
# All rights reserved.
#
# SPDX-License-Identifier: MIT
# See the enclosed "LICENSE.forge" file for exact license terms.
#

ifndef __tf_include_guard
override __tf_include_guard:=1

override _tfthis:=$(lastword $(MAKEFILE_LIST))
override _tfname:=$(notdir $(_tfthis))
override _tfdir:=$(dir $(_tfthis))

ifndef TF_TESTROOT
    $(error You must define 'TF_TESTROOT' before including $(_tfname))
endif

# remove trailing path separators from these input paths
override _tfdir:=$(_tfdir:%/=%)
override TF_TESTROOT:=$(TF_TESTROOT:%/=%)


override cf_outdir:=$(TF_TESTROOT)/.out
ifdef NOPARALLEL
override CF_SILENT_BUILDS:=1
else
override CF_QUIETER_BUILDS:=1
endif
override CF:=tfpriv
override CF_NOSYNC:=1
include $(_tfdir)/_common-forge
include $(_tfdir)/_hackery/colors


override tsep:=.

.DEFAULT_GOAL:=_all

# create some test-forge aliases for needed make-forge routines
tf-add-sources = $(call $(CF)-add-sources,$(1),$(2),$(3))
tf-build-static-library = $(call $(CF)-build-static-library,$(1))
tf-build-shared-library = $(call $(CF)-build-shared-library,$(1))


# ---------------------------------------------------------------------
# Function:     (tf-set-object-suffix,suffix)
# Description:  Sets a filename stem suffix for every object file
#               built for this build-target
# Arguments: 1: What the suffix should be set to
# ---------------------------------------------------------------------
define _tf_set_object_suffix =
$(trace_in)
    $(call $(CF)-set-object-suffix,$1)
    $(eval override cf_suffix:=@$1)
$(trace_out)
endef
tf-set-object-suffix = $(strip $(call _tf_set_object_suffix,$1))


# ---------------------------------------------------------------------
# INTERNAL:     (__tf_initialize)
# Description:  Resets internal state, in preparation for
#               tf_declare_target, et al.
# Arguments: 1: The name of the test-target to run
# ---------------------------------------------------------------------
define __tf_initialize =
$(trace_in)
    $(eval override undefine TF_ENVVARS)
    $(eval override tf_target:=$(1))
$(trace_out)
endef


# ---------------------------------------------------------------------
# Function:     (tf-declare-target,name)
# Description:  Declares to test-forge that a new test-target named
#               'name' is about to be described
# Arguments: 1: The name of the test-target being described
# ---------------------------------------------------------------------
define _tf_declare_target =
$(trace_in)
    $(eval $(call __tf_initialize,$(1)))
    $(eval $(call $(CF)-declare-target,@$(tf_target)@$(tf_subsection)@$(tf_section),$(tf_subsection_outdir)))
    $(eval $(call tf-set-object-suffix,$1))
    $(call tracep,cf_outdir is '$(cf_outdir)')
    $(call tracep,tf_section_outdir is '$(tf_section_outdir)')
    $(call tracep,tf_subsection_outdir is '$(tf_subsection_outdir)')
    $(call tracep,cf_suffix is '$(cf_suffix)')
$(trace_out)
endef
tf-declare-target = $(eval $(call _tf_declare_target,$1))


# ---------------------------------------------------------------------
# Function:     (tf-static-dependencies,targets)
# Description:  Declares the current test's build-target's
#               static-lib linkage dependencies
# Arguments: 1: space-delimited list of build-targets
# ---------------------------------------------------------------------
define _tf_static_dependencies =
$(trace_in)
    $(eval override _cfdeps:=)
    $(call tracep, cf_target is '$(cf_target)')
    $(foreach dep,$(1),$(eval override _cfdeps+=$(cf_@$(dep)@$(tf_subsection)@$(tf_section)_targetvar)))
    $(call tracep, _cfdeps is '$(_cfdeps)')
    $(call $(CF)-static-dependencies,$(_cfdeps))
    $(eval override undefine _cfdeps)
$(trace_out)
endef
tf-static-dependencies = $(strip $(call _tf_static_dependencies,$1))


# ---------------------------------------------------------------------
#  Function:     (tf-build-executable,stem)
#  Description:  This end the target definition for an executable
#  Arguments: 1: The stem of the executable's intended filename
# ---------------------------------------------------------------------
define _tf_build_executable =
$(trace_in)
    $(call tracep,tf_target is '$(tf_target)')
    $(call $(CF)-build-executable,$(tf_target))
$(trace_out)
endef
tf-build-executable = $(if $1,$(error $0 does not take an argument), \
                              $(eval $(call _tf_build_executable)))


# ---------------------------------------------------------------------
# INTERNAL:     (__tf_register_test,name)
# Description:  Adds the specified test to the list of available
#               tests, and computes the test's logfile name.
# Arguments: 1: The name of the test-target to run
# RETURNS:      The fully-qualified name of the test-target to run
# ---------------------------------------------------------------------
define __tf_register_test =
$(trace_in)
    $(eval override _name:=$(tf_section)$(tsep)$(tf_subsection)$(tsep)$(1))
    $(eval override tf_topdeps+=$(_name))
    $(eval tf_logfile:=$(tf_subsection_outdir)/$(1).log)
    $(_name)
$(trace_out)
endef


# ---------------------------------------------------------------------
# INTERNAL:     (__tf_gen_runtarget,name,text)
# Description:  Generates the target that announces & runs the test
#               exit status (to the shell) to be 0 (zero)
# Arguments: 1: The name of the test-target to run
#            2: A string describing the test's validation-type
# ---------------------------------------------------------------------
define __tf_gen_runtarget =
$(trace_in)
    $(eval override tf_testname:=$1)
    $(eval override tf_sandbox:=_$(lastword $(subst $(tsep), ,$(tf_testname))))
    $(eval __tfgr_exename:=$(notdir $(cf_$(cf_target)_file)))
    $(eval __tfgr_testcmd:=$(TF_ENVVARS) ../$(__tfgr_exename) $(tf_testargs))
    $(eval __tfgr_cmdfile:=$(tf_logfile:%.log=%.cmd))
    _announce_$(1):
	@printf '%-25s  ::  Building...' $(tf_testname)

    _run_$(1): _announce_$(1) $(tf_subsection_outdir) $(cf_target)
	@printf 'Running [%-10s]...  ' $(2)
	@echo 'cd $(tf_sandbox).sandbox && $(__tfgr_testcmd)' >$(__tfgr_cmdfile)
	@cd $(tf_subsection_outdir) \
	 && mkdir -p ./$(tf_sandbox).sandbox \
	 && ([ -e $(TF_TESTDIR)/$(tf_sandbox) ] && cp --reflink=auto -Rf $(TF_TESTDIR)/$(tf_sandbox)/* $(tf_sandbox).sandbox/ || true) \
	 && cd ./$(tf_sandbox).sandbox \
	 && $(test) $(__tfgr_testcmd) >$(tf_logfile) 2>&1 \
	   || (echo "$(call _ERROR,FAILED with exit status '$$$$?')"; exit 1)
$(trace_out)
endef


# TODO: tf-test function that allows for custom test criteria / programs ?


# ---------------------------------------------------------------------
# Function:     (tf-test-exitstatus,name,args)
# Description:  Runs the specified test, and expects the test's
#               exit status (to the shell) to be 0 (zero)
# Arguments: 1: The name of the test-target to run (note that this is
#               NOT necessarily the name of the test's executable!)
#            2: Arguments to pass to the test executable
# ---------------------------------------------------------------------
# TODO: rename this to tf-test-success, and then implement a new
#       tf-test-exitstatus that compares to expected exitstatus value.
define _tf_test_exitstatus =
    $(eval override tf_testargs:=$(2))
    $(eval override _name:=$(strip $(call __tf_register_test,$(1))))
    $(eval $(call __tf_gen_runtarget,$(_name),exitstatus))
    $(_name): _run_$(_name)
	@echo "$(call _REJOICE,PASS)"
endef
tf-test-exitstatus = $(trace_in)$(eval $(call _tf_test_exitstatus,$1,$2))$(trace_out)


# ---------------------------------------------------------------------
# INTERNAL:     (__tf-test-hashval,name,value,args)
# Description:  Runs the specified test, computes the md5sum of its
#               captured log file, and compares to the given expected
#               md5sum value.
# Arguments: 1: The name of the hash generator tool
#            2: The name of the test-target to run (note that this is
#               NOT necessarily the name of the test's executable!)
#            3: The expected hash value
#            4: Arguments to pass to the test executable
# ---------------------------------------------------------------------
define __tf_test_hashval =
    $(eval override _hashgen:=$(1))
    $(eval override _hash:=$(3))
    $(eval override tf_testargs:=$(4))
    $(eval override _name:=$(strip $(call __tf_register_test,$(2))))
    $(call __tf_gen_runtarget,$(_name),$(_hashgen))
    $(_name): _run_$(_name)
	@TF_HASHVAL=`$(_hashgen) $(tf_logfile) | awk '{print $$$$1}'` && \
	 if [ ! "$$$${TF_HASHVAL}" = "$(_hash)" ]; then \
	     echo "$(call _ERROR,FAILED due to digest mismatch)" ;\
	     echo "$(call _ERROR,$(_name): test log digest was '$$$${TF_HASHVAL}', expected '$(_hash)'.)" 2>&1 ;\
	     false ;\
	 else \
	     echo "$(call _REJOICE,PASS)";\
	     true;\
	 fi
    $(eval override undefine _hash)
endef


# ---------------------------------------------------------------------
# Functions:    (tf-test-md5sum,name,value,args)
#               (tf-test-sha1sum,name,value,args)
# Description:  Runs the specified test, computes the specified hash
#               of its captured log file, and compares to the given
#               expected hash value.
# Arguments: 1: The name of the test-target to run
#            2: The expected hash value
#            3: Arguments to pass to the test executable
# ---------------------------------------------------------------------
tf-test-md5sum  = $(trace_in)$(eval $(call __tf_test_hashval,md5sum,$1,$2,$3))$(trace_out)
tf-test-sha1sum = $(trace_in)$(eval $(call __tf_test_hashval,sha1sum,$1,$2,$3))$(trace_out)


###################################################


# ---------------------------------------------------------------------
# INTERNAL:     (__tf_include_subsection,filename)
# Description:  Includes the given test-forge subsection fragment
# Arguments: 1: the file to include
# ---------------------------------------------------------------------
#  TODO: enforce .TF extension
tf_topdeps:=
define __tf_include_subsection =
$(trace_in)
    $(eval override tf_subsection:=$(basename $(notdir $1)))
    $(eval override tf_subsection_outdir:=$(tf_section_outdir)/$(tf_subsection))
    # TODO not sure why, but $@ doesn't work in the mkdir line
    $(tf_subsection_outdir):
	@mkdir -p $(tf_subsection_outdir)
    $(call verbose,Loading sub-section '$(tf_section):$(tf_subsection)')
    $(eval include $(1))
$(trace_out)
endef


# ---------------------------------------------------------------------
# INTERNAL:     (__tf_include_section,dirname)
# Description:  Scans the given directory for test-forge fragments
#               that don't begin with an underscore (_)
# Arguments: 1: the directory to scan
# ---------------------------------------------------------------------
define __tf_include_section =
$(trace_in)
    $(eval override tf_section:=$(1))
    $(eval override TF_TESTDIR:=$(abspath $(tf_section)))
    $(eval override tf_section_outdir:=$(TF_TESTDIR)/.out)
    $(call verbose,Loading section '$(tf_section)')
    $(eval override _tests:=$(sort $(wildcard $(1)/[!_]*.TF)))
    $(foreach _test,$(_tests),$(call __tf_include_subsection,$(_test),$(1)))
    $(eval override undefine _tests)
$(trace_out)
endef


# ---------------------------------------------------------------------
# Function:     (tf-include-sections,dirlist)
# Description:  Scans every given directory for test-forge fragments.
# Arguments: 1: A space-delimited list of directories
# ---------------------------------------------------------------------
# TODO: should this be a private routine?
define tf-include-sections =
$(trace_in)
    $(foreach dir,$(1),$(call __tf_include_section,$(dir)))
$(trace_out)
endef


define __tf_gen_sliced =
$(trace_in)
    $(call tracep,$1 --> $2)
    $1: $2
$(trace_out)
endef


# a post-slice can be any of the following:
# .test
# .subsection.test
define __tf_gen_postsliced =
$(trace_in)
    $(eval override _dep:=$(subst $(tsep), ,$2))
    $(eval override _slice:=$(subst $(tsep), ,$1))
    $(eval override _words:=$(words $(_slice)))
    $(call tracep, $(_words))
    $(call tracep,'$(_slice)', [$(_dep)])
    $(eval override _dep:=$(call cdr,$(_dep)))
    $(eval override _dep:=$(if $(call cdr,$(_slice)),$(_dep),$(call cdr,$(_dep))))
    $(if $(call list-eq,$(_slice),$(wordlist 1,$(_words),$(_dep))),
         $(eval $(call __tf_gen_sliced,$1,$2)))
$(trace_out)
endef


define __tf_gen_postsliced_target =
$(trace_in)
    $(foreach dep,$(tf_topdeps),$(call __tf_gen_postsliced,$1,$(dep)))
$(trace_out)
endef


define __tf_gen_midsliced =
$(trace_in)
    $(eval override _dep:=$(subst $(tsep), ,$2))
    $(eval override _slice:=$(subst $(tsep),,$1))
    $(call tracep,$(_slice), [$(_dep)])
    $(if $(filter $(_slice),$(call car,$(call cdr,$(_dep)))),$(eval $(call __tf_gen_sliced,$1,$2)))
$(trace_out)
endef


define __tf_gen_midsliced_target =
$(trace_in)
    $(foreach dep,$(tf_topdeps),$(call __tf_gen_midsliced,$1,$(dep)))
$(trace_out)
endef


# a pre-slice can be any of the following:
#   - section[.]
#   - section.subsection[.]
# 'section.subsection.test' is special-cased to avoid circular dependency
define __tf_gen_presliced =
$(trace_in)
    $(eval override _dep:=$(subst $(tsep), ,$2))
    $(eval override _slice:=$(subst $(tsep), ,$1))
    $(eval override _words:=$(words $(_slice)))
    $(call tracep, $(_words))
    $(call tracep,'$(_slice)', [$(_dep)])
    $(if $(call list-eq,$(_slice),$(wordlist 1,$(_words),$(_dep))),
         $(if $(call neq,$1,$2),$(eval $(call __tf_gen_sliced,$1,$2))))
$(trace_out)
endef


define __tf_gen_presliced_target =
$(trace_in)
    $(foreach dep,$(tf_topdeps),$(call __tf_gen_presliced,$1,$(dep)))
$(trace_out)
endef


override tf_builtins:=clean help list version
override __tf_is_builtin_target = $(filter $1,$(tf_builtins))
define __tf_gen_builtin_target =
    $1:: _$1 ; @echo ""
endef


define __tf_gen_sliced_target =
$(trace_in)
    $(call tracep,$1)
    $(call tracep,$$(filter $(tsep)%) yields '$(filter $(tsep)%,$1)')
    $(call tracep,$$(filter %$(tsep)) yields '$(filter %$(tsep),$1)')
    $(call tracep,$$(filter $(tsep)%$(tsep)) yields '$(filter $(tsep)%$(tsep),$1)')
    $(if $(call __tf_is_builtin_target,$1),
         $(call __tf_gen_builtin_target,$1),
         $(if $(filter $(tsep)%$(tsep),$1),
              $(call __tf_gen_midsliced_target,$1),
              $(if $(filter $(tsep)%,$1),
                   $(call __tf_gen_postsliced_target,$1),
                   $(call __tf_gen_presliced_target,$1))))
$(trace_out)
endef


define _tf_gen_sliced_targets =
$(trace_in)
    $(call tracep,MAKECMDGOALS is '$(MAKECMDGOALS)')
    $(foreach tgt,$(MAKECMDGOALS),$(call __tf_gen_sliced_target,$(tgt)))
$(trace_out)
endef


# ---------------------------------------------------------------------
# Function:     tf-import-sections
# Description:  Imports tests from all subdirectories that don't start
#               with a '.'
# ---------------------------------------------------------------------
define _tf_import_all_sections =
    $(eval override tf_subdirs:=$(sort $(wildcard */)))
    $(eval override tf_subdirs:=$(tf_subdirs:%/=%))
    $(if $(call set-isect,$(tf_subdirs),$(tf_builtins)),
         $(error The following reserved words are not allowed as section names: {$(tf_builtins)}))
    $(info === Importing tests ...)
    $(call tf-include-sections,$(tf_subdirs))

    $(call _tf_gen_sliced_targets)

    .PHONY: _all
    _all: $(tf_topdeps) ;
endef
tf-import-all-sections = $(trace_in)$(eval $(call _tf_import_all_sections))$(trace_out)


#TODO: improve on the above so that tests are not imported whenever
#      the user has listed a builtin in MAKECMDGOALS (except for 'all')


define __tf_makeforge_callback =
$(trace_in)
    $(call verbose,-- target $(3)$(,) aliasing @$1$2)
    $3: @$1$2
$(trace_out)
endef


#TODO: note that @$1$2 is the same thing as $(cf_target)
define _tf_makeforge_callback =
$(trace_in)
    $(eval override _as:=$(call car,$(subst @,$(space),$2)))
    $(eval override _fulltarget:=@$1@$(_as)@$(tf_subsection)@$(tf_section))
    $(if $(call neq,$(_fulltarget),$(cf_target)),
         $(call __tf_makeforge_callback,$1,$2,$(_fulltarget)))
    $(eval override cf_$(_fulltarget)_targetvar:=$(cf_target))
$(trace_out)
endef


override tf_namespaces:=
override undefine tf_usingmf
# ---------------------------------------------------------------------
# Function:     (__tf_include_makeforge_as,namespace,filepath,outdir)
# Description:  Helper to __tf_include_makeforge_as
# Arguments: 1: Namespace to use
#            2: Path to the make-forge fragment (.MF)
#            3: [optional] name of target notification callback
# ---------------------------------------------------------------------
define __tf_include_makeforge_as =
$(trace_in)
    $(eval override _tf_makeforge_as__$1:=$2)
    $(eval override _namespace:=$(1))
    $(eval override _tfima_saved_mfpd:=$(MF_PROJECT_DIR))
    $(eval override MF_PROJECT_DIR:=$(abspath $(dir $(2))))
    $(eval override tf_usingmf:=1)
    $(eval override cf_prefix:=@)
    $(call $(CF)-include-as,$(_namespace),$(2),$3)
    $(eval override undefine cf_prefix)
    $(eval override undefine tf_usingmf)
    $(eval override MF_PROJECT_DIR:=$(_tfima_saved_mfpd))
    $(eval override undefine _tfima_saved_mfpd)
    $(eval override undefine _namespace)
    $(eval override tf_namespaces:=$1)
$(trace_out)
endef


define __tf_gen_mkdir_targetrule =
$(trace_in)
    $(1): ; @mkdir -p $(1)
$(trace_out)
endef

# ---------------------------------------------------------------------
# Function:     (_tf_include_makeforge_as,namespace,filepath,outdir)
# Description:  Imports a make-forge fragment into a test-forge
#               session, encapsulated into '@namespace' namespace.
#               'name' is about to be described.
# Arguments: 1: User-provided namespace
#            2: Namespace suffix to apply for scoping
#            3: Path to the make-forge fragment (.MF)
#            4: Path for cf_outdir override
#            5: [optional] name of target notification callback
# ---------------------------------------------------------------------
define _tf_include_makeforge_as =
$(trace_in)
    $(call tracep,tf_namespaces is '$(tf_namespaces)')
    $(call tracep,_tf_makeforge_as__$1$2 is '$(_tf_makeforge_as__$1$2)')
    $(if $(filter $1$2,$(tf_namespaces)),
         $(if $(call neq,$3,$(_tf_makeforge_as__$1$2)),
              $(error Already loaded different file '$(_tf_makeforge_as__$1$2)' as namespace '$1')))

    $(eval override _tfima_saved_cfout:=$(cf_outdir))
    $(eval override cf_outdir:=$4)
    $(if $(filter $1$2,$(tf_namespaces)),,$(call __tf_gen_mkdir_targetrule,$(cf_outdir)))
    $(call __tf_include_makeforge_as,$1$2,$3,$5)
    $(eval override cf_outdir:=$(_tfima_saved_cfout))
    $(eval override undefine _tfima_saved_cfout)
$(trace_out)
endef


# ---------------------------------------------------------------------
# Function:     (tf-export-makeforge-as,namespace,filepath)
# Description:  Imports a make-forge fragment into a test-forge
#               session, encapsulated into '@namespace' namespace.
#               'name' is about to be described.
# Arguments: 1: Namespace to use
#            2: Path to the make-forge fragment (.MF)
# ---------------------------------------------------------------------
define _tf_export_makeforge_as =
    $(call _tf_include_makeforge_as,$1,@@,$2,$(cf_outdir)/@$(1),_tf_makeforge_callback)
endef
tf-export-makeforge-as = $(trace_in)$(strip $(call _tf_export_makeforge_as,$1,$2))$(trace_out)


# ---------------------------------------------------------------------
# Function:     (tf-share-makeforge-as,namespace,filepath)
# Description:  Imports a make-forge fragment into a test-forge
#               session, encapsulated into '@namespace' namespace.
#               'name' is about to be described.
# Arguments: 1: Namespace to use
#            2: Path to the make-forge fragment (.MF)
# ---------------------------------------------------------------------
define _tf_share_makeforge_as =
    $(call _tf_include_makeforge_as,$1,@@$(tf_section),$2,$(tf_section_outdir)/@$(1),_tf_makeforge_callback)
endef
tf-share-makeforge-as = $(trace_in)$(strip $(call _tf_share_makeforge_as,$1,$2))$(trace_out)


# ---------------------------------------------------------------------
# Function:     (tf-use-makeforge-as,namespace,filepath)
# Description:  Imports a make-forge fragment into a test-forge
#               session, encapsulated into '@namespace' namespace.
#               'name' is about to be described.
# Arguments: 1: Namespace to use
#            2: Path to the make-forge fragment (.MF)
# ---------------------------------------------------------------------
define _tf_use_makeforge_as =
    $(call _tf_include_makeforge_as,$1,@$(tf_subsection)@$(tf_section),$2,$(tf_subsection_outdir)/@$(1),_tf_makeforge_callback)
endef
tf-use-makeforge-as = $(trace_in)$(strip $(call _tf_use_makeforge_as,$1,$2))$(trace_out)


override mf-include-as = $(trace_in) \
    $(if $(tf_usingmf), \
         $(eval $$(call $(CF)-include-as,$1,$2))), \
         $(error Within test-forge, you must use 'tf-use-makeforge-as' instead of 'mf-include-as') \
         $(trace_out)


override __mfguard = $(if $(tf_usingmf),                           \
                          $(eval $$(call $(1:mf-%=$(CF)-%),$(subst $(;),$(,),$2))), \
                          $(error ILLEGAL CALL TO '$1' FROM WITHIN TEST-FORGE ***) )


override mf-declare-target       = $(trace_in)$(call __mfguard,$0,$1)$(trace_out)
override mf-set-object-suffix    = $(trace_in)$(call __mfguard,$0,$1)$(trace_out)
override mf-add-sources          = $(trace_in)$(call __mfguard,$0,$1;$2;$3)$(trace_out)
override mf-static-dependencies  = $(trace_in)$(call __mfguard,$0,$1)$(trace_out)
override mf-build-static-library = $(trace_in)$(call __mfguard,$0,$1)$(trace_out)
override mf-build-shared-library = $(trace_in)$(call __mfguard,$0,$1)$(trace_out)
override mf-build-executable     = $(trace_in)$(call __mfguard,$0,$1)$(trace_out)


.PHONY: _list
_list: _version
	$(info $(\n)Here is a list of all the available tests:)
	$(foreach dep,$(sort $(tf_topdeps)),$(info $( )  - $(dep)))
	@echo

.PHONY: _clean
_clean: _version
	@echo "Cleaning..."
	@$(RM) -R $(cf_outdir)
	@$(RM) -R $(foreach dir,$(tf_subdirs),$(dir)/.out)
	@echo

.PHONY: _help
_help: _version
	@echo "  - Type 'make' to run all tests."
	@echo "  - Type 'make list' to see a list of test-targets."
	@echo "  - Type 'make clean' to clear out all previous test results (TODO)."
	@echo


endif  # __tf_include_guard

