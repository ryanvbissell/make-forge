# vim: set ft=make:
#
# Copyright (c) 2016-2017, Ryan V. Bissell
# All rights reserved.
#
# SPDX-License-Identifier: MIT
# See the enclosed "LICENSE.forge" file for exact license terms.
#

ifndef __tf_include_guard
override __tf_include_guard:=1

override _tfname:=$(notdir $(lastword $(MAKEFILE_LIST)))

ifndef TFDIR
    $(error You must define 'TFDIR' before including $(_tfname))
endif
ifndef TF_TESTROOT
    $(error You must define 'TF_TESTROOT' before including $(_tfname))
endif

# remove trailing path separators from these input paths
override TFDIR:=$(TFDIR:%/=%)
override TF_TESTROOT:=$(TF_TESTROOT:%/=%)


override cfout:=$(TF_TESTROOT)/.out
override CF_QUIET_BUILDS:=1
override CF_NUMPROCS:=1
override CF:=tfpriv
include $(TFDIR)/_common-forge


.DEFAULT_GOAL:=all


# create some test-forge aliases for needed make-forge routines
tf_add_sources = $(call $(CF)_add_sources,$(1),$(2),$(3))
tf_build_executable = $(call $(CF)_build_executable,$(1),$(2),$(3))
tf_build_static_library = $(call $(CF)_build_static_library,$(1))
tf_build_shared_library = $(call $(CF)_build_shared_library,$(1))
tf_static_dependencies = $(call $(CF)_static_dependencies,$(1))

# ---------------------------------------------------------------------
# INTERNAL:     __tf_initialize
# Description:  Resets internal state, in preparation for
#               tf_declare_test_target, et al.
# Arguments: 1: The name of the test-target to run
# ---------------------------------------------------------------------
# INTERNAL: initializes internal state
define __tf_initialize =
    $(eval override undefine TF_ENVVARS)
    $(eval override tf_target:=$(1))
endef


# ---------------------------------------------------------------------
# Function:     tf_declare_test_target
# Description:  Declares to test-forge that a new test-target named
#               'name' is about to be described
# Arguments: 1: The name of the test-target being described
# ---------------------------------------------------------------------
define tf_declare_test_target =
    $(eval $(call __tf_initialize,$(1)))
    $(eval $(call $(CF)_declare_target,_tf_build_$(tf_target)))
    $(eval override mf_outdir:=$(cfout)/$(TF_SUB_SECTION)/$(tf_target))

    $(tf_target): _run_$(tf_target)

    $(mf_outdir):
	@mkdir -p $(mf_outdir)
endef


# ---------------------------------------------------------------------
# INTERNAL:     __tf_register_test
# Description:  Adds the specified test to the list of available
#               tests, and computes the test's logfile name.
# Arguments: 1: The name of the test-target to run
# ---------------------------------------------------------------------
define __tf_register_test =
    $(eval override TF_SUB_TOPDEPS+=$(1))
    $(eval tf_logfile:=$(mf_outdir)/$(1).log)
endef


# ---------------------------------------------------------------------
# INTERNAL:     __tf_gen_runtarget
# Description:  Generates the target that announces & runs the test
#               exit status (to the shell) to be 0 (zero)
# Arguments: 1: The name of the test-target to run
#            2: A string describing the test's validation-type
# ---------------------------------------------------------------------
define __tf_gen_runtarget =
    _announce_$(1):
	@printf '%15s :  ' $(1)

    _run_$(1): _announce_$(1) $(mf_target)
	@printf 'Running [%-10s]...  ' $(2)
	@$(test) $(TF_ENVVARS) $(mf_$(mf_target)_final) $(mf_outdir) $(tf_testargs) >$(tf_logfile) 2>&1 || (echo "\033[0;31mFAILED with exit status '$$$$?'\033[0m"; exit 1)
endef


# ---------------------------------------------------------------------
# Function:     tf_test_exitstatus
# Description:  Runs the specified test, and expects the test's
#               exit status (to the shell) to be 0 (zero)
# Arguments: 1: The name of the test-target to run
#            2: Arguments to pass to the test executable
# ---------------------------------------------------------------------
# TODO: rename this to tf_test_success, and then implement a new
#       tf_test_exitstatus that compares to expected exitstatus value.
define tf_test_exitstatus =
    $(eval override tf_testargs:=$(2))
    $(eval $(call __tf_register_test,$(1)))
    $(eval $(call __tf_gen_runtarget,$(1),exitstatus))
    $(1): _run_$(1)
	@echo "PASS"
endef


# ---------------------------------------------------------------------
# Function:     tf_test_md5sum
# Description:  Runs the specified test, computes the md5sum of its
#               captured log file, and compares to the given expected
#               md5sum value.
# Arguments: 1: The name of the test-target to run
#            2: The expected md5sum value
#            3: Arguments to pass to the test executable
# ---------------------------------------------------------------------
define tf_test_md5sum =
    $(eval override _md5:=$(2))
    $(eval override tf_testargs:=$(3))
    $(call __tf_register_test,$(1))
    $(call __tf_gen_runtarget,$(1),md5sum)
    $(1): _run_$(1)
	@TF_MD5SUM=`md5sum $(tf_logfile) | awk '{print $$$$1}'` && \
	 if [ ! "$$$${TF_MD5SUM}" = "$(_md5)" ]; then \
	     echo "\033[0;31mFAILED due to md5 mismatch" ;\
	     echo "$(1): md5 was '$$$${TF_MD5SUM}', expected '$(_md5)'.\033[0m" 2>&1 ;\
	     false ;\
	 else \
	     echo "PASS";\
	     true;\
	 fi
    $(eval override undefine _md5)
endef


# ---------------------------------------------------------------------
# Function:     tf_test_sha1sum
# Description:  Runs the specified test, computes the sha1sum of its
#               captured log file, and compares to the given expected
#               sha1sum value.
# Arguments: 1: The name of the test-target to run
#            2: The expected sha1sum value
#            3: Arguments to pass to the test executable
# ---------------------------------------------------------------------
# TODO deprecated in favor of tf_test_md5sum ?
define tf_test_sha1sum =
    $(eval override _sha1:=$(2))
    $(eval override tf_testargs:=$(3))
    $(call __tf_register_test,$(1))
    $(call __tf_gen_runtarget,$(1),sha1sum)
    $(1): _run_$(1)
	@TF_SHA1SUM=`sha1sum $(tf_logfile) | awk '{print $$$$1}'` && \
	 if [ ! "$$$${TF_SHA1SUM}" = "$(_sha1)" ]; then \
	     echo "\033[0;31mFAILED due to sha1 mismatch" ;\
	     echo "$(1): sha1 was '$$$${TF_SHA1SUM}', expected '$(_sha1)'.\033[0m" 2>&1 ;\
	     false ;\
	 else \
	     echo "PASS";\
	     true;\
	 fi
    $(eval override undefine _sha1)
endef


###################################################


# ---------------------------------------------------------------------
# INTERNAL:     _tf_include
# Description:  Includes the given test-forge fragment
# Arguments: 1: the file to include
# ---------------------------------------------------------------------
#  TODO: enforce .TF extension
tf_topdeps:=
define _tf_include =
    $(eval override TF_SUB_TOPDEPS:=)
    $(eval override TF_SUB_SECTION:=$(2))
    $(eval include $(1))
    $(eval tf_topdeps+= $(TF_SUB_TOPDEPS))
endef


# ---------------------------------------------------------------------
# INTERNAL:     _tf_include_testdir
# Description:  Scans the given directory for test-forge fragments
#               that don't begin with an underscore (_)
# Arguments: 1: the directory to scan
# ---------------------------------------------------------------------
define _tf_include_testdir =
    $(eval override tf_testdir:=$(abspath $(1)))
    $(eval override _tests:=$(sort $(wildcard $(1)/[!_]*.TF)))
    $(foreach _test,$(_tests),$(call _tf_include,$(_test),$(1)))
    $(eval override undefine _tests)
endef


# ---------------------------------------------------------------------
# Function:     tf_include_testdirs
# Description:  Scans every given directory for test-forge fragments.
# Arguments: 1: A space-delimited list of directories
# ---------------------------------------------------------------------
# TODO: this should be a private routine?
define tf_include_testdirs =
    $(foreach dir,$(1),$(call _tf_include_testdir,$(dir)))
endef


# ---------------------------------------------------------------------
# Function:     tf_import_testdirs
# Description:  Imports tests from all subdirectories that don't start
#               with a '.'
# ---------------------------------------------------------------------
define tf_import_testdirs =
    $(eval override _subdirs:=$(sort $(wildcard */)))
    $(eval override _subdirs:=$(_subdirs:%/=%))
    $(info === Importing tests ...)
    $(eval $(call tf_include_testdirs,$(_subdirs)))

    all:: $(tf_topdeps)
endef


define __tf_emit_mferror =
    $(error ILLEGAL CALL TO '$(1)' FROM WITHIN TEST-FORGE ***)
endef


# TODO: the $(strip) call could be removed if we stop using define
# for functions like $(CF)_include_as, and instead begin using
# multi-line variable assignment, ending each line with '\'
override semi:=;
override __tf_mfguard  = $(if $(tf_blockmf),$(call __tf_emit_mferror,$1),$(eval $$(strip $$(call $(1:mf_%=$(CF)_%),$(subst $(semi),$(comma),$2)))))
override __tf_mfguard2 = $(if $(tf_blockmf),$(call __tf_emit_mferror,$1),$(eval           $(call $(1:mf_%=$(CF)_%),$(subst $(semi),$(comma),$2))))

# TODO, not sure why 'mf_build_static_library' and 'mf_build_shared_library'
# need __tf_mfguard2 to work; __tf_mfguard was expected to be used by all
# mf_* functions in this file.  Will keep __tf_mfguard2 as a workaround
# for now, and deal with it later.


override mf_include_as           = $(call __tf_mfguard,$0,$1;$2)
override mf_declare_target       = $(call __tf_mfguard,$0,$1)
override mf_set_object_suffix    = $(call __tf_mfguard,$0,$1)
override mf_add_sources          = $(call __tf_mfguard,$0,$1;$2;$3)
override mf_static_dependencies  = $(call __tf_mfguard,$0,$1)
override mf_build_static_library = $(call __tf_mfguard2,$0,$1)
override mf_build_shared_library = $(call __tf_mfguard2,$0,$1)
override mf_build_executable     = $(call __tf_mfguard,$0,$1)


# ---------------------------------------------------------------------
# Function:     tf_use_makeforge(namespace,filepath)
# Description:  Imports a make-forge fragment into a test-forge
#               session, encapsulated into 'namespace@' namespace.
#               'name' is about to be described.
# Arguments: 1: Namespace to use
#            2: Path to the make-forge fragment (.MF)
# ---------------------------------------------------------------------
override tf_blockmf:=1
define tf_use_makeforge =
    $(eval override _tfum_saved_mfpd:=$(MF_PROJECT_DIR))
    $(eval override MF_PROJECT_DIR:=$(abspath $(dir $(2))))
    $(eval override undefine tf_blockmf)
    $(eval $(call $(CF)_include_as,$(1),$(2)))
    $(eval override tf_blockmf:=1)
    $(eval override MF_PROJECT_DIR:=$(_tfum_saved_mfpd))
    $(eval override undefine _tfum_saved_mfpd)
endef



endif  # __tf_include_guard
