# vim: set ft=make:
#
# Copyright (c) 2016-2017, Ryan V. Bissell
# All rights reserved.
#
# SPDX-License-Identifier: MIT
# See the enclosed "LICENSE.forge" file for exact license terms.
#

ifndef __tf_include_guard
override __tf_include_guard:=1

override _tfname:=$(notdir $(lastword $(MAKEFILE_LIST)))

ifndef TFDIR
    $(error You must define 'TFDIR' before including $(_tfname))
endif
ifndef TF_TESTROOT
    $(error You must define 'TF_TESTROOT' before including $(_tfname))
endif

# remove trailing path separators from these input paths
override TFDIR:=$(TFDIR:%/=%)
override TF_TESTROOT:=$(TF_TESTROOT:%/=%)


override cfout:=$(TF_TESTROOT)/.out
override CF_QUIET_BUILDS:=1
override CF_NUMPROCS:=1
override CF:=tfpriv
override CF_NOSYNC:=1
include $(TFDIR)/_common-forge


.DEFAULT_GOAL:=all


# create some test-forge aliases for needed make-forge routines
tf-add-sources = $(call $(CF)-add-sources,$(1),$(2),$(3))
tf-build-executable = $(call $(CF)-build-executable,$(1))
tf-build-static_library = $(call $(CF)-build-static-library,$(1))
tf-build-shared_library = $(call $(CF)-build-shared-library,$(1))
tf-static-dependencies = $(call $(CF)-static-dependencies,$(1))

# ---------------------------------------------------------------------
# INTERNAL:     (__tf_initialize)
# Description:  Resets internal state, in preparation for
#               tf_declare_test_target, et al.
# Arguments: 1: The name of the test-target to run
# ---------------------------------------------------------------------
# INTERNAL: initializes internal state
define __tf_initialize =
    $(eval override undefine TF_ENVVARS)
    $(eval override tf_target:=$(1))
endef


# ---------------------------------------------------------------------
# Function:     (tf-declare-test-target,name)
# Description:  Declares to test-forge that a new test-target named
#               'name' is about to be described
# Arguments: 1: The name of the test-target being described
# ---------------------------------------------------------------------
define _tf_declare_test_target =
    $(eval $(call __tf_initialize,$(1)))
    $(eval $(call $(CF)-declare-target,_tf_build_$(tf_target)))
    $(eval override cf_outdir:=$(cfout)/$(TF_SUB_SECTION)/$(tf_target))

    $(tf_target): _run_$(tf_target)

    $(cf_outdir):
	@mkdir -p $(cf_outdir)
endef
tf-declare-test-target = $(eval $(call _tf_declare_test_target,$1))


# ---------------------------------------------------------------------
# INTERNAL:     (__tf_register_test,name)
# Description:  Adds the specified test to the list of available
#               tests, and computes the test's logfile name.
# Arguments: 1: The name of the test-target to run
# ---------------------------------------------------------------------
define __tf_register_test =
    $(eval override TF_SUB_TOPDEPS+=$(1))
    $(eval tf_logfile:=$(cf_outdir)/$(1).log)
endef


# ---------------------------------------------------------------------
# INTERNAL:     (__tf_gen_runtarget,name,text)
# Description:  Generates the target that announces & runs the test
#               exit status (to the shell) to be 0 (zero)
# Arguments: 1: The name of the test-target to run
#            2: A string describing the test's validation-type
# ---------------------------------------------------------------------
define __tf_gen_runtarget =
    _announce_$(1):
	@printf '%15s :  Building...' $(1)

    _run_$(1): _announce_$(1) $(cf_target)
	@printf 'Running [%-10s]...  ' $(2)
	@cd $(cf_outdir) \
	 && mkdir -p ./sandbox \
	 && cd ./sandbox \
	 && $(test) $(TF_ENVVARS) $(cf_$(cf_target)_file) $(tf_testargs) >$(tf_logfile) 2>&1 \
	   || (echo "\033[0;31mFAILED with exit status '$$$$?'\033[0m"; exit 1)
endef


# TODO: tf-test function that allows for custom test criteria / programs ?


# ---------------------------------------------------------------------
# Function:     (tf-test-exitstatus,name,args)
# Description:  Runs the specified test, and expects the test's
#               exit status (to the shell) to be 0 (zero)
# Arguments: 1: The name of the test-target to run (note that this is
#               NOT necessarily the name of the test's executable!)
#            2: Arguments to pass to the test executable
# ---------------------------------------------------------------------
# TODO: rename this to tf-test-success, and then implement a new
#       tf-test-exitstatus that compares to expected exitstatus value.
define _tf_test_exitstatus =
    $(eval override tf_testargs:=$(2))
    $(eval $(call __tf_register_test,$(1)))
    $(eval $(call __tf_gen_runtarget,$(1),exitstatus))
    $(1): _run_$(1)
	@echo "PASS"
endef
tf-test-exitstatus = $(eval $(call _tf_test_exitstatus,$1,$2,$3))


# ---------------------------------------------------------------------
# INTERNAL:     (__tf-test-hashval,name,value,args)
# Description:  Runs the specified test, computes the md5sum of its
#               captured log file, and compares to the given expected
#               md5sum value.
# Arguments: 1: The name of the hash generator tool
#            2: The name of the test-target to run (note that this is
#               NOT necessarily the name of the test's executable!)
#            3: The expected hash value
#            4: Arguments to pass to the test executable
# ---------------------------------------------------------------------
define __tf_test_hashval =
    $(eval override _hashgen:=$(1))
    $(eval override _hash:=$(3))
    $(eval override tf_testargs:=$(4))
    $(call __tf_register_test,$(2))
    $(call __tf_gen_runtarget,$(2),$(_hashgen))
    $(2): _run_$(2)
	@TF_HASHVAL=`$(_hashgen) $(tf_logfile) | awk '{print $$$$1}'` && \
	 if [ ! "$$$${TF_HASHVAL}" = "$(_hash)" ]; then \
	     echo "\033[0;31mFAILED due to digest mismatch" ;\
	     echo "$(2): test's log digest was '$$$${TF_HASHVAL}', expected '$(_hash)'.\033[0m" 2>&1 ;\
	     false ;\
	 else \
	     echo "PASS";\
	     true;\
	 fi
    $(eval override undefine _hash)
endef


# ---------------------------------------------------------------------
# Functions:    (tf-test-md5sum,name,value,args)
#               (tf-test-sha1sum,name,value,args)
# Description:  Runs the specified test, computes the specified hash
#               of its captured log file, and compares to the given
#               expected hash value.
# Arguments: 1: The name of the test-target to run
#            2: The expected hash value
#            3: Arguments to pass to the test executable
# ---------------------------------------------------------------------
tf-test-md5sum  = $(eval $(call __tf_test_hashval,md5sum,$1,$2,$3))
tf-test-sha1sum = $(eval $(call __tf_test_hashval,sha1sum,$1,$2,$3))


###################################################


# ---------------------------------------------------------------------
# INTERNAL:     (__tf_include,filename)
# Description:  Includes the given test-forge fragment
# Arguments: 1: the file to include
# ---------------------------------------------------------------------
#  TODO: enforce .TF extension
tf_topdeps:=
define __tf_include =
    $(eval override TF_SUB_TOPDEPS:=)
    $(eval override TF_SUB_SECTION:=$(2))
    $(eval include $(1))
    $(eval tf_topdeps+= $(TF_SUB_TOPDEPS))
endef


# ---------------------------------------------------------------------
# INTERNAL:     (__tf_include_testdir,dirname)
# Description:  Scans the given directory for test-forge fragments
#               that don't begin with an underscore (_)
# Arguments: 1: the directory to scan
# ---------------------------------------------------------------------
define __tf_include_testdir =
    $(eval override tf_testdir:=$(abspath $(1)))
    $(eval override _tests:=$(sort $(wildcard $(1)/[!_]*.TF)))
    $(foreach _test,$(_tests),$(call __tf_include,$(_test),$(1)))
    $(eval override undefine _tests)
endef


# ---------------------------------------------------------------------
# Function:     (tf-include-testdirs,dirlist)
# Description:  Scans every given directory for test-forge fragments.
# Arguments: 1: A space-delimited list of directories
# ---------------------------------------------------------------------
# TODO: should this be a private routine?
define tf-include-testdirs =
    $(foreach dir,$(1),$(call __tf_include_testdir,$(dir)))
endef


# ---------------------------------------------------------------------
# Function:     tf-import-testdirs
# Description:  Imports tests from all subdirectories that don't start
#               with a '.'
# ---------------------------------------------------------------------
define tf-import-testdirs =
    $(eval override _subdirs:=$(sort $(wildcard */)))
    $(eval override _subdirs:=$(_subdirs:%/=%))
    $(info === Importing tests ...)
    $(call tf-include-testdirs,$(_subdirs))

    all:: $(tf_topdeps)
endef


define __tf_emit_mferror =
    $(error ILLEGAL CALL TO '$(1)' FROM WITHIN TEST-FORGE ***)
endef

# this will chastise the user if they call a make-forge
# routine from within a test-forge fragment
override __tf_mfguard = $(if $(tf_blockmf),                \
                             $(call __tf_emit_mferror,$1), \
                             $(eval $$(call $(1:mf-%=$(CF)-%),$(subst $(;),$(,),$2))))

override mf-include-as           = $(call __tf_mfguard,$0,$1;$2)
override mf-declare-target       = $(call __tf_mfguard,$0,$1)
override mf-set-object-suffix    = $(call __tf_mfguard,$0,$1)
override mf-add-sources          = $(call __tf_mfguard,$0,$1;$2;$3)
override mf-static-dependencies  = $(call __tf_mfguard,$0,$1)
override mf-build-static-library = $(call __tf_mfguard,$0,$1)
override mf-build-shared-library = $(call __tf_mfguard,$0,$1)
override mf-build-executable     = $(call __tf_mfguard,$0,$1)


# ---------------------------------------------------------------------
# Function:     (tf-use-makeforge,namespace,filepath)
# Description:  Imports a make-forge fragment into a test-forge
#               session, encapsulated into 'namespace@' namespace.
#               'name' is about to be described.
# Arguments: 1: Namespace to use
#            2: Path to the make-forge fragment (.MF)
# ---------------------------------------------------------------------
override tf_blockmf:=1
define _tf_use_makeforge =
    $(eval override _tfum_saved_mfpd:=$(MF_PROJECT_DIR))
    $(eval override MF_PROJECT_DIR:=$(abspath $(dir $(2))))
    $(eval override undefine tf_blockmf)
    $(call $(CF)-include-as,$(1),$(2))
    $(eval override tf_blockmf:=1)
    $(eval override MF_PROJECT_DIR:=$(_tfum_saved_mfpd))
    $(eval override undefine _tfum_saved_mfpd)
endef
tf-use-makeforge = $(strip $(call _tf_use_makeforge,$1,$2))


endif  # __tf_include_guard

